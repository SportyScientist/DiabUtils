#' @param event Name of the variable holding the event. Needs to be binary (0-1 or TRUE-FALSE). Defaults to "event".
#' @return HOMAR-IR
#' @examples
#' HOMAIR <- HOMAIR(40, 80);
#' data <- data %>% mutate(HOMAIR = calculate_HOMAIR(40,80))
#' @export
prep_data_km <- function(data, date = "date", id = "id", event = "event"){
if (!requireNamespace("dplyr", quietly = TRUE)) {
stop("The dplyr package is required but is not installed. Please install it first.")
}
if (!all(data[, event] %in% c(0, 1, NA)) && !all(data[,event] %in% c(TRUE, FALSE, NA))) {
stop("The 'event' variable must be binary (either 0/1 or TRUE/FALSE).")
}
# Convert date to Date class
#data[["Datum"]] <- as.Date(data[[date]])
# Calculate the time from the first date to each of the other dates
#data_new <- data %>%
# arrange(id, Datum) %>%
#group_by(id) %>%
#mutate(time_from_first = (Datum - first(Datum)) / 365.25) %>%
##ungroup()
# Keep only the first row where event is TRUE for each patient, or the last row if event is never TRUE
#  data_new_2 <- data_new %>%
#   arrange(id, Datum) %>%
#  group_by(id) %>%
#  slice(if (any(event == TRUE)) which.max(event) else n()) %>%
#  ungroup()
#  return(data_new_2)
}
prep_data_km(data, id = "patno", date = "datum")
#' Function to bring longitudinal data into the appropriate format for survival analysis.
#' @param data Dataframe in long format with one row per timepoint.
#' @param date Name of the variable holding the measurement date. Defaults to "date".
#' @param id Name of the variable holding the patient ID. Defaults to "id".
#' @param event Name of the variable holding the event. Needs to be binary (0-1 or TRUE-FALSE). Defaults to "event".
#' @return HOMAR-IR
#' @examples
#' HOMAIR <- HOMAIR(40, 80);
#' data <- data %>% mutate(HOMAIR = calculate_HOMAIR(40,80))
#' @export
prep_data_km <- function(data, date = "date", id = "id", event = "event"){
if (!requireNamespace("dplyr", quietly = TRUE)) {
stop("The dplyr package is required but is not installed. Please install it first.")
}
if (!all(data[, event] %in% c(0, 1, NA)) && !all(data[,event] %in% c(TRUE, FALSE, NA))) {
stop("The 'event' variable must be binary (either 0/1 or TRUE/FALSE).")
}
# Convert date to Date class
data[[date]] <- as.Date(data[[date]])
# Calculate the time from the first date to each of the other dates
data_new <- data %>%
arrange(!!as.name("id"), !!as.name("date")) %>%
group_by(!!as.name("id")) %>%
mutate(time_from_first = (!!as.name("date") - first(!!as.name("date"))) / 365.25) %>%
ungroup()
# Keep only the first row where event is TRUE for each patient, or the last row if event is never TRUE
#  data_new_2 <- data_new %>%
#   arrange(id, Datum) %>%
#  group_by(id) %>%
#  slice(if (any(event == TRUE)) which.max(event) else n()) %>%
#  ungroup()
#  return(data_new_2)
}
prep_data_km(data, id = "patno", date = "datum")
#' Function to bring longitudinal data into the appropriate format for survival analysis.
#' @param data Dataframe in long format with one row per timepoint.
#' @param date Name of the variable holding the measurement date. Defaults to "date".
#' @param id Name of the variable holding the patient ID. Defaults to "id".
#' @param event Name of the variable holding the event. Needs to be binary (0-1 or TRUE-FALSE). Defaults to "event".
#' @return HOMAR-IR
#' @examples
#' HOMAIR <- HOMAIR(40, 80);
#' data <- data %>% mutate(HOMAIR = calculate_HOMAIR(40,80))
#' @export
prep_data_km <- function(data, date = "date", id = "id", event = "event"){
if (!requireNamespace("dplyr", quietly = TRUE)) {
stop("The dplyr package is required but is not installed. Please install it first.")
}
if (!all(data[, event] %in% c(0, 1, NA)) && !all(data[,event] %in% c(TRUE, FALSE, NA))) {
stop("The 'event' variable must be binary (either 0/1 or TRUE/FALSE).")
}
# Convert date to Date class
data[[date]] <- as.Date(data[[date]])
# Calculate the time from the first date to each of the other dates
data_new <- data %>%
arrange(!!as.name(id), !!as.name(date)) %>%
group_by(!!as.name(id)) %>%
mutate(time_from_first = (!!as.name(date) - first(!!as.name(date))) / 365.25) %>%
ungroup()
# Keep only the first row where event is TRUE for each patient, or the last row if event is never TRUE
#  data_new_2 <- data_new %>%
#   arrange(id, Datum) %>%
#  group_by(id) %>%
#  slice(if (any(event == TRUE)) which.max(event) else n()) %>%
#  ungroup()
#  return(data_new_2)
}
prep_data_km(data, id = "patno", date = "datum")
#' Function to bring longitudinal data into the appropriate format for survival analysis.
#' @param data Dataframe in long format with one row per timepoint.
#' @param date Name of the variable holding the measurement date. Defaults to "date".
#' @param id Name of the variable holding the patient ID. Defaults to "id".
#' @param event Name of the variable holding the event. Needs to be binary (0-1 or TRUE-FALSE). Defaults to "event".
#' @return HOMAR-IR
#' @examples
#' HOMAIR <- HOMAIR(40, 80);
#' data <- data %>% mutate(HOMAIR = calculate_HOMAIR(40,80))
#' @export
prep_data_km <- function(data, date = "date", id = "id", event = "event"){
if (!requireNamespace("dplyr", quietly = TRUE)) {
stop("The dplyr package is required but is not installed. Please install it first.")
}
if (!all(data[,event] %in% c(TRUE, FALSE, NA))) {
stop("The 'event' variable must be binary (TRUE/FALSE).")
}
# Convert date to Date class
data[[date]] <- as.Date(data[[date]])
# Calculate the time from the first date to each of the other dates
data_new <- data %>%
arrange(!!as.name(id), !!as.name(date)) %>%
group_by(!!as.name(id)) %>%
mutate(time_from_first = (!!as.name(date) - first(!!as.name(date))) / 365.25) %>%
ungroup()
# Keep only the first row where event is TRUE for each patient, or the last row if event is never TRUE
data_new_2 <- data_new %>%
arrange(!!as.name(id), !!as.name(date)) %>%
group_by(!!as.name(id)) %>%
slice(if (any(!!as.name(event) == TRUE)) which.max(!!as.name(event)) else n()) %>%
ungroup()
return(data_new_2)
}
prep_data_km(data, id = "patno", date = "datum")
#' Function to bring longitudinal data into the appropriate format for survival analysis.
#' @param data Dataframe in long format with one row per timepoint.
#' @param date Name of the variable holding the measurement date. Defaults to "date".
#' @param id Name of the variable holding the patient ID. Defaults to "id".
#' @param event Name of the variable holding the event. Needs to be binary (0-1 or TRUE-FALSE). Defaults to "event".
#' @return HOMAR-IR
#' @examples
#' HOMAIR <- HOMAIR(40, 80);
#' data <- data %>% mutate(HOMAIR = calculate_HOMAIR(40,80))
#' @export
prep_data_km <- function(data, date = "date", id = "id", event = "event"){
if (!requireNamespace("dplyr", quietly = TRUE)) {
stop("The dplyr package is required but is not installed. Please install it first.")
}
if (!all(data[,event] %in% c(TRUE, FALSE, NA))) {
stop("The 'event' variable must be binary (TRUE/FALSE).")
}
# Convert date to Date class
data[[date]] <- as.Date(data[[date]])
# Calculate the time from the first date to each of the other dates
data_new <- data %>%
arrange(!!as.name(id), !!as.name(date)) %>%
group_by(!!as.name(id)) %>%
mutate(time_from_first = (!!as.name(date) - first(!!as.name(date))) / 365.25) %>%
ungroup()
# Keep only the first row where event is TRUE for each patient, or the last row if event is never TRUE
data_new_2 <- data_new %>%
arrange(!!as.name(id), !!as.name(date)) %>%
group_by(!!as.name(id)) #%>%
# slice(if (any(!!as.name(event) == TRUE)) which.max(!!as.name(event)) else n()) %>%
# ungroup()
return(data_new_2)
}
prep_data_km(data, id = "patno", date = "datum")
test_km <- prep_data_km(data, id = "patno", date = "datum")
View(test_km)
#' Function to bring longitudinal data into the appropriate format for survival analysis.
#' @param data Dataframe in long format with one row per timepoint.
#' @param date Name of the variable holding the measurement date. Defaults to "date".
#' @param id Name of the variable holding the patient ID. Defaults to "id".
#' @param event Name of the variable holding the event. Needs to be binary (0-1 or TRUE-FALSE). Defaults to "event".
#' @return HOMAR-IR
#' @examples
#' HOMAIR <- HOMAIR(40, 80);
#' data <- data %>% mutate(HOMAIR = calculate_HOMAIR(40,80))
#' @export
prep_data_km <- function(data, date = "date", id = "id", event = "event"){
if (!requireNamespace("dplyr", quietly = TRUE)) {
stop("The dplyr package is required but is not installed. Please install it first.")
}
if (!all(data[,event] %in% c(TRUE, FALSE, NA))) {
stop("The 'event' variable must be binary (TRUE/FALSE).")
}
# Convert date to Date class
data[[date]] <- as.Date(data[[date]])
# Calculate the time from the first date to each of the other dates
data_new <- data %>%
arrange(!!as.name(id), !!as.name(date)) %>%
group_by(!!as.name(id)) %>%
mutate(time_from_first = (!!as.name(date) - first(!!as.name(date))) / 365.25) %>%
ungroup()
# Keep only the first row where event is TRUE for each patient, or the last row if event is never TRUE
data_new_2 <- data_new %>%
arrange(!!as.name(id), !!as.name(date)) %>%
group_by(!!as.name(id)) #%>%
slice(if (any(!!as.name(event) == TRUE | 1 )) which.max(!!as.name(event)) else n()) %>%
ungroup()
return(data_new_2)
}
test_km <- prep_data_km(data, id = "patno", date = "datum")
#' Function to bring longitudinal data into the appropriate format for survival analysis.
#' @param data Dataframe in long format with one row per timepoint.
#' @param date Name of the variable holding the measurement date. Defaults to "date".
#' @param id Name of the variable holding the patient ID. Defaults to "id".
#' @param event Name of the variable holding the event. Needs to be binary (0-1 or TRUE-FALSE). Defaults to "event".
#' @return HOMAR-IR
#' @examples
#' HOMAIR <- HOMAIR(40, 80);
#' data <- data %>% mutate(HOMAIR = calculate_HOMAIR(40,80))
#' @export
prep_data_km <- function(data, date = "date", id = "id", event = "event"){
if (!requireNamespace("dplyr", quietly = TRUE)) {
stop("The dplyr package is required but is not installed. Please install it first.")
}
if (!all(data[,event] %in% c(TRUE, FALSE, NA))) {
stop("The 'event' variable must be binary (TRUE/FALSE).")
}
# Convert date to Date class
data[[date]] <- as.Date(data[[date]])
# Calculate the time from the first date to each of the other dates
data_new <- data %>%
arrange(!!as.name(id), !!as.name(date)) %>%
group_by(!!as.name(id)) %>%
mutate(time_from_first = (!!as.name(date) - first(!!as.name(date))) / 365.25) %>%
ungroup()
# Keep only the first row where event is TRUE for each patient, or the last row if event is never TRUE
data_new_2 <- data_new %>%
arrange(!!as.name(id), !!as.name(date)) %>%
group_by(!!as.name(id)) #%>%
slice(if (any(!!as.name(event) %in% c(TRUE, 1) )) which.max(!!as.name(event)) else n()) %>%
ungroup()
return(data_new_2)
}
test_km <- prep_data_km(data, id = "patno", date = "datum")
#' Function to bring longitudinal data into the appropriate format for survival analysis.
#' @param data Dataframe in long format with one row per timepoint.
#' @param date Name of the variable holding the measurement date. Defaults to "date".
#' @param id Name of the variable holding the patient ID. Defaults to "id".
#' @param event Name of the variable holding the event. Needs to be binary (0-1 or TRUE-FALSE). Defaults to "event".
#' @return HOMAR-IR
#' @examples
#' HOMAIR <- HOMAIR(40, 80);
#' data <- data %>% mutate(HOMAIR = calculate_HOMAIR(40,80))
#' @export
prep_data_km <- function(data, date = "date", id = "id", event = "event"){
if (!requireNamespace("dplyr", quietly = TRUE)) {
stop("The dplyr package is required but is not installed. Please install it first.")
}
if (!all(data[,event] %in% c(TRUE, FALSE, NA))) {
stop("The 'event' variable must be binary (TRUE/FALSE).")
}
# Convert date to Date class
data[[date]] <- as.Date(data[[date]])
# Calculate the time from the first date to each of the other dates
data_new <- data %>%
arrange(!!as.name(id), !!as.name(date)) %>%
group_by(!!as.name(id)) %>%
mutate(time_from_first = (!!as.name(date) - first(!!as.name(date))) / 365.25) %>%
ungroup()
# Keep only the first row where event is TRUE for each patient, or the last row if event is never TRUE
data_new_2 <- data_new %>%
arrange(!!as.name(id), !!as.name(date)) %>%
group_by(!!as.name(id)) #%>%
slice(if (any(!!as.name(event) == TRUE )) which.max(!!as.name(event)) else n()) %>%
ungroup()
return(data_new_2)
}
test_km <- prep_data_km(data, id = "patno", date = "datum")
#' Function to bring longitudinal data into the appropriate format for survival analysis.
#' @param data Dataframe in long format with one row per timepoint.
#' @param date Name of the variable holding the measurement date. Defaults to "date".
#' @param id Name of the variable holding the patient ID. Defaults to "id".
#' @param event Name of the variable holding the event. Needs to be binary (0-1 or TRUE-FALSE). Defaults to "event".
#' @return HOMAR-IR
#' @examples
#' HOMAIR <- HOMAIR(40, 80);
#' data <- data %>% mutate(HOMAIR = calculate_HOMAIR(40,80))
#' @export
prep_data_km <- function(data, date = "date", id = "id", event = "event"){
if (!requireNamespace("dplyr", quietly = TRUE)) {
stop("The dplyr package is required but is not installed. Please install it first.")
}
if (!all(data[,event] %in% c(TRUE, FALSE, NA))) {
stop("The 'event' variable must be binary (TRUE/FALSE).")
}
# Convert date to Date class
data[[date]] <- as.Date(data[[date]])
# Calculate the time from the first date to each of the other dates
data_new <- data %>%
arrange(!!as.name(id), !!as.name(date)) %>%
group_by(!!as.name(id)) %>%
mutate(time_from_first = (!!as.name(date) - first(!!as.name(date))) / 365.25) %>%
ungroup()
# Keep only the first row where event is TRUE for each patient, or the last row if event is never TRUE
data_new_2 <- data_new %>%
arrange(!!as.name(id), !!as.name(date)) %>%
group_by(!!as.name(id)) %>%
slice(if (any(!!as.name(event) == TRUE )) which.max(!!as.name(event)) else n()) %>%
ungroup()
return(data_new_2)
}
test_km <- prep_data_km(data, id = "patno", date = "datum")
View(test_km)
test_km <- test_km %>% select(patno, datum, time_from_first, event)
View(test_km)
#' Function to bring longitudinal data into the appropriate format for survival analysis.
#' @param data Dataframe in long format with one row per timepoint.
#' @param date Name of the variable holding the measurement date. Defaults to "date".
#' @param id Name of the variable holding the patient ID. Defaults to "id".
#' @param event Name of the variable holding the event. Needs to be binary (0-1 or TRUE-FALSE). Defaults to "event".
#' @return HOMAR-IR
#' @examples
#' HOMAIR <- HOMAIR(40, 80);
#' data <- data %>% mutate(HOMAIR = calculate_HOMAIR(40,80))
#' @export
prep_data_km <- function(data, date = "date", id = "id", event = "event"){
if (!requireNamespace("dplyr", quietly = TRUE)) {
stop("The dplyr package is required but is not installed. Please install it first.")
}
if (!all(data[,event] %in% c(TRUE, FALSE, NA))) {
stop("The 'event' variable must be binary (TRUE/FALSE).")
}
# Convert date to Date class
data[[date]] <- as.Date(data[[date]])
# Calculate the time from the first date to each of the other dates
data_new <- data %>%
filter(!is.na(!!as.name(event))) %>%
arrange(!!as.name(id), !!as.name(date)) %>%
group_by(!!as.name(id)) %>%
mutate(time_from_first = (!!as.name(date) - first(!!as.name(date))) / 365.25) %>%
ungroup()
# Keep only the first row where event is TRUE for each patient, or the last row if event is never TRUE
data_new_2 <- data_new %>%
arrange(!!as.name(id), !!as.name(date)) %>%
group_by(!!as.name(id)) %>%
slice(if (any(!!as.name(event) == TRUE )) which.max(!!as.name(event)) else n()) %>%
ungroup()
return(data_new_2)
}
test_km <- test_km %>% select(patno, datum, time_from_first, event)
test_km <- prep_data_km(data, id = "patno", date = "datum")
View(test_km)
#'
#' Function to bring longitudinal data into the appropriate format for survival analysis.
#' @param data Dataframe in long format with one row per timepoint.
#' @param date Name of the variable holding the measurement date. Defaults to "date".
#' @param id Name of the variable holding the patient ID. Defaults to "id".
#' @param event Name of the variable holding the event. Needs to be binary (0-1 or TRUE-FALSE). Defaults to "event".
#' @return Dataframe with one row per id.
#' @examples
#' test_km <- prep_data_km(data, id = "patno", date = "datum")
#' @export
prep_data_km <- function(data, date = "date", id = "id", event = "event"){
if (!requireNamespace("dplyr", quietly = TRUE)) {
stop("The dplyr package is required but is not installed. Please install it first.")
}
if (!all(data[, event] %in% c(0, 1, NA)) && !all(data[, event] %in% c(TRUE, FALSE, NA))) {
stop("The 'event' variable must be binary (either 0/1 or TRUE/FALSE).")
}
# Convert date to Date class
data[[date]] <- as.Date(data[[date]])
# Calculate the time from the first date to each of the other dates
data_new <- data %>%
filter(!is.na(!!as.name(event))) %>%
arrange(!!as.name(id), !!as.name(date)) %>%
group_by(!!as.name(id)) %>%
mutate(time_from_first = (!!as.name(date) - first(!!as.name(date))) / 365.25) %>%
ungroup()
# Keep only the first row where event is TRUE for each patient, or the last row if event is never TRUE
data_new_2 <- data_new %>%
arrange(!!as.name(id), !!as.name(date)) %>%
group_by(!!as.name(id)) %>%
slice(if (any(!!as.name(event) == TRUE )) which.max(!!as.name(event)) else n()) %>%
ungroup()
return(data_new_2)
}
test_km <- prep_data_km(data, id = "patno", date = "datum")
roxygenise();
{
output <- case_when(glucose_000 >= 7 | glucose_120 >= 11 | a1c >= 6.5 ~  "DIA",
glucose_120 >= 7.8 & glucose_000 >= 5.6 ~ "IFG+IGT",
glucose_120 >= 7.8 ~ "IGT", glucose_000 >= 5.6 ~ "IFG",
glucose_000 < 5.6 & glucose_120 < 7.8 ~ "NGT",
is.na(glucose_000) & is.na(glucose_120) ~ "", TRUE ~ "")
return(ifelse(output == "", NA, output))
}
calculate_glycat <- function (glucose_000, glucose_120, hba1c, units = "mgdl")
{
output <- case_when(glucose_000 >= 7 | glucose_120 >= 11 | a1c >= 6.5 ~  "DIA",
glucose_120 >= 7.8 & glucose_000 >= 5.6 ~ "IFG+IGT",
glucose_120 >= 7.8 ~ "IGT", glucose_000 >= 5.6 ~ "IFG",
glucose_000 < 5.6 & glucose_120 < 7.8 ~ "NGT",
is.na(glucose_000) & is.na(glucose_120) ~ "", TRUE ~ "")
return(ifelse(output == "", NA, output))
}
data %>% mutate(cat = calculate_glycat(glucose_000, glucose_120, hba1c_perc))
calculate_glycat <- function (glucose_000, glucose_120, hba1c, units = "mgdl")
{
output <- case_when(glucose_000 >= 7 | glucose_120 >= 11 | hba1c >= 6.5 ~  "DIA",
glucose_120 >= 7.8 & glucose_000 >= 5.6 ~ "IFG+IGT",
glucose_120 >= 7.8 ~ "IGT", glucose_000 >= 5.6 ~ "IFG",
glucose_000 < 5.6 & glucose_120 < 7.8 ~ "NGT",
is.na(glucose_000) & is.na(glucose_120) ~ "", TRUE ~ "")
return(ifelse(output == "", NA, output))
}
data %>% mutate(cat = calculate_glycat(glucose_000, glucose_120, hba1c_perc))
calculate_glycat <- function (glucose_000, glucose_120, hba1c, units = "mgdl")
{
# Check if input variables are numeric
if (!is.numeric(glucose_000) || !is.numeric(glucose_120) || !is.numeric(hba1c)) {
stop("All input variables must be numeric.")
}
# Check if units is either "mgdl" or "mmoll"
if (!units %in% c("mgdl", "mmoll")) {
stop("Units must be either 'mgdl' or 'mmoll'.")
}
# Convert mmol/l to mg/dl if needed
if (units == "mmoll") {
glucose_000 <- glucose_000 * 18.0182
glucose_120 <- glucose_120 * 18.0182
}
# Calculate the glycemic category
output <- case_when(
glucose_000 >= 126 | glucose_120 >= 200 | hba1c >= 6.5 ~ "DIA",
glucose_120 >= 140 & glucose_000 >= 100 ~ "IFG+IGT",
glucose_120 >= 140 ~ "IGT",
glucose_000 >= 100 ~ "IFG",
glucose_000 < 100 & glucose_120 < 140 ~ "NGT",
is.na(glucose_000) & is.na(glucose_120) ~ "",
TRUE ~ ""
)
return(ifelse(output == "", NA, output))
}
calculate_glycat(90, 150, 5.8, units = "mgdl")
calculate_glycat(90, 150, 5.8, units = "ts")
roxygenise();
rm(list = c("my.render.cat", "my.render.cont", "prep_data_km"))
roxygenise();
rm(list = c("calculate_glycat"))
roxygenise();
shiny::runApp('C:/Users/idm/OneDrive - Helmholtz Zentrum München/Projects/03_prediabetes_clusters_shiny')
library(roxygen2)
roxygenise()
roxygenise()
#' Calculate eGFR
#'
#' Calculates the AUC between two timepoints using the trapezoid method
#' @param creatinine Creatinine in mg/dl
#' @param age Age in year
#' @param sex Sex
#' @param female string of which value in sex equals female. Defaults to "female"
#' @export
calculate_egfr <- function(creatinine, age, sex, female = "female") {
if(sex == female){
if(creatinine <= 0.7){factor = 144 * (creatinine / 0.7) ** (-0.329)}
else{factor = 144 * (creatinine / 0.7) ** (-1.209)}
} else { #for men
if(creatinine <= 0.9){
factor = 141 * (creatinine / 0.9) ** (-0.411)
}
else{
factor = 141 * (creatinine / 0.9) ** (-1.209)}
}
age_factor = 0.993 ** age
egfr = factor * age_factor
return(egfr)
}
roxygenize()
library(devtools)
install_github("SportyScientist/DiabUtils")
remove.packages("DiabUtils")
remove.packages("DiabUtils")
install_github("SportyScientist/DiabUtils")
q()
install_github("SportyScientist/DiabUtils")
library(devtools)
# remove.packages("DiabUtils")
install_github("SportyScientist/DiabUtils")
library(DiabUtils)
?calculate_OGIS
?calculate_HOMAB
roxygenise()
library(roxygenise)
library(roxygenise2)
library(roxygen2)
roxygenise()
data <- read.csv("../01_plis_relaps/data/data_full_with_fat.csv")
?calculate_egfr
test <- data %>% mutate(test = calculate_egfr( creat,
age, sex, female = "weiblich")) %>% pull(test)
library(dplyr)
test <- data %>% mutate(test = calculate_egfr( creat,
age, sex, female = "weiblich")) %>% pull(test)
mean(test, na.rm = T)
mean(creat)
mean(data$creat)
mean(data$creat, na.rm = T)
test <- data %>% mutate(test = calculate_egfr(creat / 88,
age, sex, female = "weiblich")) %>% pull(test)
mean(data$test, na.rm = T)
mean(test, na.rm = T)
data$creat[1]
data$creat[1] /88
data$age[1]
data$sex[1]
test[1]
roxygenise()
library(roxygen2)
roxygenize()
roxygenize()
